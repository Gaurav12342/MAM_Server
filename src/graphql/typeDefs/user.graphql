scalar Upload
enum Role {
  ADMIN
  USER
}

type User {
  id: ID
  name: String
  email:String
  profileImage:String
  password:String
  role:Role
  token:String
  tokenExpiration:Date
  createdAt:Date
  updatedAt:Date
  deletedAt:Date
}

type Token {
  token:String
}

input UserCreateInput {
  id: ID
  name: String!
  email:String!
  password:String
  role:Role
}

input UserUpdateInput {
  name: String
  profileImage:Upload
  password:String
  role:Role
}

input LoginCreateInput {
  id:ID
  email:String!
  password:String!
}

input UserCreateWhereUniqueInput {
  id:ID!
}

input UserCreateWhereInput {
  id:ID
  email:String
  profileImage:Upload
  password:String
  role:Role
  token:String
  tokenExpiration:Date
  createdAt:Date
  updatedAt:Date
  deletedAt:Date
}

input forgotPasswordCreateInput {
  email:String!
}

input changePasswordCreateInput {
  currentPassword:String!
  newPassword:String!
}

type userNotificationPayload{
  id:ID
  email:String
  profileImage:Upload
  password:String
  role:Role
  token:String
  tokenExpiration:Date
  createdAt:Date
  updatedAt:Date
  deletedAt:Date
}

type Query {
  getUser(where:UserCreateWhereUniqueInput!):User
  getUsers(where:UserCreateWhereInput): [User!]
  currentUser:User
}

type Mutation {
  createUser(data:UserCreateInput!): User!
  handleValidateInviteToken(token:String!,password:String!):Boolean!
  login(data:LoginCreateInput!):Token!
  forgotPassword(data:forgotPasswordCreateInput!):Boolean!
  handleValidateResetPasswordToken(token:String!,newPassword:String!):Boolean!
  changePassword(data:changePasswordCreateInput!):Boolean
  updateUser(data:UserUpdateInput!,where:UserCreateWhereUniqueInput!):User!
  deleteUser(where:UserCreateWhereUniqueInput!):Boolean!
}

type Subscription{
  userNotification:userNotificationPayload
}